#!/bin/bash

# Definitions for the [endeavouros] repo at 'mirrors'.

# Note: this file will be sourced into a function,
# so all variables are made 'local'.

local REPONAME="endeavouros"
local RELEASE_TAGS=(
    endeavouros
    # mirror1
    # mirror2
)

# user to sign packages
local SIGNER="EndeavourOS"

# general options
local USE_GENERATED_FILELIST="no"                   # may generate 'repofiles.txt' into the repo
# local USE_RELEASE_ASSETS="no"                     # either 'release assets' or "ordinary" github files
local USE_RELEASE_ASSETS="yes"                      # either 'release assets' or "ordinary" github files
local PREFER_GIT_OVER_RELEASE=yes

# local folders
local ASSETSDIR="$PWD"
local PKGBUILD_ROOTDIR="$ASSETSDIR/PKGBUILDS"       # temporary copy only, will always be overwritten
local GITDIR="$ASSETSDIR/../../repo"                # not $REPONAME...

export MAKEPKG_CLEANUP=yes                          # some of *our* PKGBUILD files (e.g. yay) may use this!

local ARCHIVE_GIT="$ASSETSDIR/../../archive/.git"
local ARCHIVE_TAG=packages

# new way with absolute paths:
ASSETSDIR="$EOS_ROOT/_BUILD_/$REPONAME"
PKGBUILD_ROOTDIR="$ASSETSDIR/PKGBUILDS"
GITDIR="$EOS_ROOT/repo"
ARCHIVE_GIT="$EOS_ROOT/archive/.git"

# source EndeavourOS-packages-buildlist || exit 1

# PKGNAMES is the current build list for the packages at the [endeavouros] repository.
#
# Notes:
# - The AUR package names require suffix "/aur".
# - The EndeavourOS names are actually folder names for packages under PKGBUILDS, not actual package names!
#
PKGNAMES=(                                        # Alphabetically ordered.
    akm
    arc-gtk-theme-eos
    #arc-x-icons-theme/aur

    bashdb/aur

    calamares

    ckbcomp

    downgrade/aur
    # dracut

    endeavouros-keyring
    endeavouros-mirrorlist

    endeavouros-skel-default
    endeavouros-skel-i3wm
    endeavouros-skel-xfce4

    endeavouros-theming
    endeavouros-xfce4-terminal-colors

    eos-apps-info
    eos-bash-shared
    eos-downgrade
    eos-dracut                   # was: dracut-hook/aur
    eos-hooks
    eos-lightdm-gtk-theme
    eos-lightdm-slick-theme
    eos-log-tool
    eos-lxdm-gtk3
    eos-packagelist
    eos-plasma-sddm-config
    eos-qogir-icons
    eos-quickstart
    eos-rankmirrors
    eos-sddm-theme

    eos-settings-budgie
    eos-settings-cinnamon
    eos-settings-gnome
    eos-settings-lxde
    eos-settings-lxqt
    eos-settings-mate
    eos-settings-plasma

    eos-skel-ce-awesome
    eos-skel-ce-bspwm
    eos-skel-ce-openbox
    eos-skel-ce-qtile
    eos-skel-ce-sway
    eos-skel-ce-worm

    eos-translations
    eos-update-notifier

    filesystem

    kernel-install-for-dracut
    keyserver-rank

    lsb-release

    mkinitcpio-openswap/aur

    nvidia-hook
    nvidia-inst
    nvidia-installer-common

    pahis
    #paper-icon-theme
    paru/aur

    qemu-arm-aarch64-static-bin

    rate-mirrors/aur
    reflector-bash-completion
    reflector-simple

    welcome
    wgetpaste-eos
    worm/aur

    yad
    yay/aur

    zfs-dkms/aur
    zfs-utils/aur
)

# Use option --pkgnames="names" for special checks!


# PKGNAMES_WAIT specifies which of the packages in PKGNAMES will not be built.
# Include them in quotes because we use the pipe character '|' to separate package name and the version.
# Also add the version to skip, like 'pkgname|version-to-skip', e.g. 'eos-lxdm-gtk3|0.5.3-5'.
# If all versions of a package should be in wait mode, write only the package name, e.g. 'eos-lxdm-gtk3'.
#
PKGNAMES_WAIT=(
    filesystem
    lsb-release
)



declare -A PKG_CHANGELOGS=(
    bashdb              "https://aur.archlinux.org/cgit/aur.git/log/?h=bashdb"
    downgrade           "https://github.com/archlinux-downgrade/downgrade/blob/main/CHANGELOG.md"
    eos-bash-shared     "https://github.com/endeavouros-team/eos-bash-shared/commits"
    filesystem          "https://gitlab.archlinux.org/archlinux/packaging/packages/filesystem/-/commits"
    lsb-release         "https://gitlab.archlinux.org/archlinux/packaging/packages/lsb-release/-/commits/main"
    mkinitcpio-openswap "https://aur.archlinux.org/cgit/aur.git/log/?h=mkinitcpio-openswap"
    paru                "https://github.com/Morganamilo/paru/releases"
    rate-mirrors        "https://github.com/westandskif/rate-mirrors/releases"
    yad                 "https://github.com/v1cont/yad/blob/master/NEWS"
    yay                 "https://github.com/Jguer/yay/releases"
    welcome             "https://github.com/endeavouros-team/welcome/commits"
    zfs-dkms            "https://github.com/openzfs/zfs/releases"
    zfs-utils           "https://github.com/openzfs/zfs/releases"
)


# HAS_GIT_VER array incldues packages whose pkgver can be anything, i.e. newer package can have lower pkgver.
# Sometimes e.g. -git packages have that property.
# declare -A HAS_GIT_PKGVER            # allow any pkgver value if "yes"
# HAS_GIT_PKGVER[???-git]=yes


declare -A PKG_MAKEPKG_OPTIONS=(
    endeavouros-skel-i3wm      "--nodeps"
    endeavouros-skel-xfce4     "--nodeps"
    eos-dracut                 "--nodeps"
    eos-lightdm-slick-theme    "--nodeps"
    eos-plasma-sddm-config     "--nodeps"
    eos-sddm-theme             "--nodeps"
    eos-settings-plasma        "--nodeps"
    kernel-install-for-dracut  "--nodeps"
    eos-quickstart             "--rmdeps"
    worm                       "--rmdeps"
    yay                        "--rmdeps"

    # calamares                "--nodeps"
)

# Hook functions are run in the beginning after RationalityTests in assets.make.
# There may be several hook functions.
local ASSET_HOOKS=(
    # currently none
)

# Package hooks

# do this for: icon-themes?

wget() {
    local wget1=/usr/local/bin/wget.workaround
    local wget2=/usr/bin/wget

    if [ -x $wget1 ] ; then
        $wget1 "$@"
    else
        $wget2 "$@"
    fi
}
export -f wget


_common_show_version() {
    if [ "$localversion" != "$dev_version" ] ; then
        echo -n "[dev=$dev_version] " >&2
    fi
}

_Updpkgsums() {
    local Pkgbuild="$1"
    updpkgsums "$Pkgbuild" 2>/dev/null
}

_Get_pkgver() {
    local Pkgbuild="$1"
    # grep "^pkgver=" "$Pkgbuild" | cut -d '=' -f 2 | sed "s|^[\"']\(.*\)[\"']$|\1|"
    local val=""
    GetPkgbuildValue "$Pkgbuild" pkgver val
    echo "$val"
}

#_GetSource0() {
#    local Pkgbuild="$1"
#    source "$Pkgbuild"
#    echo "${source[0]}"
#}

_fetch_that_file() {
    local file="$1"
    local url="$2"

    [ -n "$file" ] || return 1
    [ -n "$url" ] || return 1

    if [ 0 -eq 1 ] ; then
        local out=""
        [ "$file" != "-" ] && out="--output '$file'"
        curl --silent --location --max-time 10 $out "$url"
    else
        wget -q --timeout=10 -O"$file" "$url"
    fi
}

__generic_get_pkgname() { local funcname="$1" ; echo "$funcname" | cut -d '_' -f 2 ; }




InstallNeededPackages() {
    local pkg install=()

    for pkg in "$@" ; do
        pacman -Qq "$pkg" >& /dev/null || install+=("$pkg")
    done
    if [ ${#install[@]} -gt 0 ] ; then
        printf "\n==> Installing packages: %s\n" "${install[*]}" >&2
        su-c_wrapper pacman -S "${install[@]}"
    fi
}

_budgie-control-center_hook() {
    local pkgs=(
        modemmanager
        # gnome-online-accounts
        # gsound
        budgie-desktop
        # libcheese
        # colord-gtk
    )

    InstallNeededPackages "${pkgs[@]}"
}



# 2022-Feb-19: added temporary hooks for *-bin ==> non-bin, remove e.g. 2 months after both packages have updated ??

_rate-mirrors_hook() {
    local PKGBUILD="$PKGBUILD_ROOTDIR"/"$(__generic_get_pkgname $FUNCNAME)"/PKGBUILD
    sed -i $PKGBUILD \
        -e "/^depends=/a \ \nreplaces=(rate-mirrors-bin)"
}

_dracut_hook() {
    local PKGBUILD="$PKGBUILD_ROOTDIR"/"$(__generic_get_pkgname $FUNCNAME)"/PKGBUILD
    local eos_pkgver=""
    local eos_pkgrel=""
    GetPkgbuildValue "$PKGBUILD" pkgver eos_pkgver
    GetPkgbuildValue "$PKGBUILD" pkgrel eos_pkgrel
    local extra_ver=$(expac -S %v extra/dracut)

    if [ $(vercmp $extra_ver ${eos_pkgver}-$eos_pkgrel) -ge 0 ] ; then
        printf "$FUNCNAME: dracut: Arch version is not older than EndeavourOS ==> skip the EndeavourOS version. " >&2
    fi
}

_paru_hook() {
    local PKGBUILD="$PKGBUILD_ROOTDIR"/"$(__generic_get_pkgname $FUNCNAME)"/PKGBUILD
    local Pkgver=""   # =$(grep ^pkgver= "$PKGBUILD" | cut -d'=' -f2)
    local Pkgrel=""   # =$(grep ^pkgrel= "$PKGBUILD" | cut -d'=' -f2)

    GetPkgbuildValue "$PKGBUILD" pkgver Pkgver
    GetPkgbuildValue "$PKGBUILD" pkgrel Pkgrel

    if [ "${Pkgver}-$Pkgrel" = "1.11.1-1" ] ; then
        sed -i "$PKGBUILD" \
            -e 's|^pkgver=.*|pkgver=1.11.2|' \
            -e "s|^sha256sums=.*|sha256sums=('9fd8db52894f9e7d61a3901d2c441502aab28a090083e0d6fdb58118e53a8a14')|"
    fi
}

_eos-lightdm-gtk-theme_hook() {
    # Clone package source of eos-lightdm-gtk-theme from EndeavourOS ARM

    local Pkgname="$(__generic_get_pkgname $FUNCNAME)"

    pushd /tmp >/dev/null || return 1
    rm -rf PKGBUILDS
    git clone https://github.com/endeavouros-arm/PKGBUILDS.git >& /dev/null || return 1   # Get all from EOS ARM.
    [ -d "$PKGBUILD_ROOTDIR"/$Pkgname ] && rm -rf "$PKGBUILD_ROOTDIR"/$Pkgname            # Replace old local eos-lightdm-gtk-theme dir
    mv PKGBUILDS/$Pkgname "$PKGBUILD_ROOTDIR"/ || return 1                                # with the new eos-lightdm-gtk-theme dir.
    popd >/dev/null
    rm -rf /tmp/PKGBUILDS                                                                 # clean up
}

_bashdb_hook() {
    local Pkgname="$(__generic_get_pkgname $FUNCNAME)"
    local Pkgbuild="$PKGBUILD_ROOTDIR"/$Pkgname/PKGBUILD
    local VER=""
    local PKGREL=""

    GetPkgbuildValue "$Pkgbuild" _ver VER

    # if [ "$(grep "^_ver=" "$Pkgbuild" | cut -d'=' -f2)" = "'5.0-1.1.2'" ] ; then
    if [ "$VER" = "5.0-1.1.2" ] ; then
        # support also bash version 5.1

        local line="s/'5.0')/'5.0' | '5.1')/"

        sed -i "$Pkgbuild" \
            -e "/^[ ]*#sed /a \  sed -i configure -e \"$line\""

        # show in pkgrel we changed this package
        GetPkgbuildValue "$Pkgbuild" pkgrel PKGREL
        # if [ "$(grep ^pkgrel= "$Pkgbuild" | cut -d'=' -f2)" = "'1'" ] ; then
        if [ "$PKGREL" = "1" ] ; then
            sed -i "$Pkgbuild" \
                -e 's|^pkgrel=.*|pkgrel=1.1|'
        fi
    fi
}

_paper-icon-theme-git_hook() {
    local Pkgname="$(__generic_get_pkgname $FUNCNAME)"
    local Pkgbuild="$PKGBUILD_ROOTDIR"/$Pkgname/PKGBUILD
    local cleanup=""
    local commits commit
    local data=$(curl -s https://github.com/snwh/paper-icon-theme)

    commits=$(echo "$data" | grep -B2 " commits$"   | head -n1 | sed 's|[ ]*<strong>\([0-9]*\)</strong>$|\1|')  # 832
    commit=$( echo "$data" | grep ">Permalink<" | sed 's|.*/tree/\([0-9a-f]*\)".*|\1|')                         # aa3e8af7a1f0831a51fd7e638a4acb077a1e5188
    commit=${commit::7}                                                                                         # aa3e8af

    cleanup+='    local dir="$srcdir/../$pkgname"\n'
    cleanup+='    [ -d "$dir" ] && rm -rf "$dir"'

    # Changes:
    # - remove reference to $srcdir
    # - get pkgver from github info
    # - remove pkgver()
    # - conflicts with paper-icon-theme
    # - add some cleanup

    sed -i "$Pkgbuild" \
        -e 's|^pkgname=.*|pkgname=paper-icon-theme|' \
        -e 's|cd "$srcdir/$pkgname"$|cd "$pkgname"|' \
        -e "s|^pkgver=.*|pkgver=1.5.0.$commits.$commit|" \
        -e 's|^pkgver()|_pkgver_not_used()|' \
        -e "/^provides=(/a \conflicts=(paper-icon-theme)" \
        -e "/ ninja -C /a \    # cleanup\n$cleanup"

    return 11  # pkgver was changed
}

_ckbcomp_hook_new() {
    printf "@" >&2

    local data=$(curl -Lsm 10 -o- https://packages.debian.org/source/sid/console-setup)
    local Pkgver=$(echo "$data" | grep metadata | head -n1 | sed -e 's|.*/console-setup_||' -e 's|_.*||')
    local PKGBUILD="$PKGBUILD_ROOTDIR"/"$(__generic_get_pkgname $FUNCNAME)"/PKGBUILD
    local new_url=https://deb.debian.org/debian/pool/main/c/console-setup/console-setup_$Pkgver.tar.xz
    sed -i "$PKGBUILD" \
        -e "/^source=.*/a \source=($new_url)"
}

_ckbcomp_hook() {
    local tool=ckbcomp

    # new version info
    local info retval
    info=$(curl --fail --silent --location --max-time 10 https://salsa.debian.org/installer-team/console-setup/-/tags)
    retval=$?
    if [ $retval -ne 0 ] ; then
        _ckbcomp_hook_new
        return
    fi
    if [ -n "$(echo "$info" | grep "503 Service Unavailable")" ] ; then
        printf "fetching info failed. " >&2
        return 1
    fi

    local dl="https://salsa.debian.org"$(echo "$info" | grep "gl-button btn btn-sm btn-confirm" | head -n1 | sed -E -e 's|.*href="([^"]+)".*|\1|' -e 's|zip$|tar.gz|')
    local archivesuffix=""
    local namesuffix=""

    [[ $dl =~ /archive/debian/ ]]     && archivesuffix="/debian"
    [[ $dl =~ console-setup-debian ]] && namesuffix="-debian"

    # local newver=$(echo "$info" | grep "console-setup Debian release" | head -n1 | sed -E 's|.* release ([0-9\.]+).*|\1|')

    local newver=$(echo "$info" | grep "console-setup-.*\.tar\.gz" | head -n1)
    newver=$(echo "$newver" | sed -E 's|.*/([0-9\.]+)/.*|\1|')

    if [ -n "$(echo "$newver" | sed 's|[0-9\.]*||g')" ] ; then
        printf "finding new version failed, got '$newver'" >&2
        return 1
    fi

    if [ $(vercmp "$newver" "1.211") -le 0 ] ; then
        return                 # NOTE: 1.196 - 1.211: 'ckbcomp' hasn't changed!
    fi

    # current version info
    local Pkgbuild="$PKGBUILD_ROOTDIR"/$tool/PKGBUILD
    local Pkgver=$(_Get_pkgver "$Pkgbuild")

    [ "$newver" = "$Pkgver" ] && return

    pushd "$PKGBUILD_ROOTDIR"/$tool >/dev/null

    sed -i PKGBUILD \
        -e "s|^pkgver=.*|pkgver=$newver|" \
        -e "s|^source=.*|source=($dl)|" \
        -e "s|^_namesuffix=.*|_namesuffix='$namesuffix'|" \
        -e "s|^_archivesuffix=.*|_archivesuffix='$archivesuffix'|"

    if ! updpkgsums PKGBUILD >& /dev/null ; then
        popd >/dev/null
        printf "updpkgsums failed " >&2
        return 1
    fi
    if ! makepkg -p PKGBUILD >& /dev/null ; then
        popd >/dev/null
        printf "makepkg failed " >&2
        return 1
    fi
    # cleanup makepkg stuff
    rm -rf src pkg *.zst *.xz *.gz

    if [ ! -x /usr/bin/$tool ] ; then
        # Cannot compare with non-existing /usr/bin/ckbcomp !!!
        printf "sorry, ckbcomp is not installed, cannot compare. " >&2
    else
        if ! diff src/console-setup-$newver/Keyboard/$tool /usr/bin/$tool >& /dev/null ; then
            printf "new version $newver is available, $tool differ. " >&2
            popd >/dev/null
            return 11  # pkgver (and maybe download link) were changed
        fi
    fi

    popd >/dev/null
}

_ckbcomp_hook_old() {
    local tool=ckbcomp
    local Dstdir="$PKGBUILD_ROOTDIR"/$tool
    local Pkgbuild="$Dstdir"/PKGBUILD
    local Url="$(_GetSource0 "$Pkgbuild")"
    Url="$(dirname "$Url")"
    local newinfo="$(_fetch_that_file "-" "$Url")"
    [ -n "$newinfo" ] || { printf "Error: $tool: fetching info failed! " >&2 ; return 1 ; }
    local newbase=console-setup_
    local newver="$(echo "$newinfo" | grep $newbase | grep "\.tar\.xz" | tail -n 1 | sed "s|^.*\"$newbase\([0-9\.]*\)\.tar.*$|\1|")"
    local curver="$(_Get_pkgver "$Pkgbuild")"
    local filebase=$newbase$newver

    if [ "$newver" != "$curver" ] ; then
        local ff
        for ff in dsc tar.xz ; do
            _fetch_that_file "$Dstdir/$filebase.$ff" "$Url"/$filebase.$ff || {
                printf "Error: $tool: fetching $filebase.$ff failed. " >&2
                return 1
            }
        done
        local sha256="$(cat "$Dstdir/$filebase.dsc" | grep -A1 ^Checksums-Sha256 | tail -n 1 | awk '{print $1}')"
        echo "$sha256  $Dstdir/$filebase.tar.xz" | sha256sum -c >& /dev/null || {
            echo "Error: $tool: sha256 for $filebase.tar.xz does not match!" >&2
            return 1
        }
        rm -f "$Dstdir/$filebase.dsc"
        sed -i "$Pkgbuild" \
            -e "s|^pkgver=.*|pkgver=$newver|"

        case "$newver" in
            "1.199")
                sed -i "$Pkgbuild"  \
                    -e 's| cd console-setup-${pkgver}$| cd console-setup|'
                ;;
            *)
                sed -i "$Pkgbuild"  \
                    -e 's| cd console-setup$| cd console-setup-$pkgver|'
                ;;
        esac
        updpkgsums "$Pkgbuild" 2>/dev/null
        # echo -n "#" >&2
        return 11  # pkgver was changed
    fi
}

_ckbcomp_hook_change_version_old() {
    # change "$url" http to https
    sed -i "$PKGBUILD_ROOTDIR"/ckbcomp/PKGBUILD \
        -e 's|^url="http:|url="https:|'
}

_yay_hook_check_latest() {
    # check if AUR PKGBUILD has the latest version of yay from the developer
    local tool=yay
    local url=https://github.com/Jguer/$tool/releases
    local tmpdata
    local Pkgbuild="$PKGBUILD_ROOTDIR"/$tool/PKGBUILD
    local localversion=$(_Get_pkgver "$Pkgbuild")
    local dev_version

    tmpdata="$(_fetch_that_file "-" $url)"
    if [ $? -ne 0 ] ; then
        echo "cannot fetch info about $tool" >&2
        return 1
    fi
    dev_version="$(echo "$tmpdata" | grep /Jguer/yay/tree/v | head -n 1 | sed 's|^.*/tree/v\([0-9\.]*\)" .*$|\1|')"

    _common_show_version
}

_yay_hook_check_latest_old() {
    # check if AUR PKGBUILD has the latest version of yay from the developer
    local tool=yay
    local url=https://github.com/Jguer/$tool/releases
    local tmpfile=$(mktemp)
    local Pkgbuild="$PKGBUILD_ROOTDIR"/$tool/PKGBUILD
    local localversion=$(_Get_pkgver "$Pkgbuild")
    local dev_version

    _fetch_that_file $tmpfile $url || {
        echo "cannot fetch info about $tool" >&2
        rm -f $tmpfile
        return 1
    }
    #dev_version="$(grep "Release v[0-9]" $tmpfile | sed 's|^.*Release v\([0-9\.]*\).*$|\1|')"
    dev_version="$(grep /Jguer/yay/tree/v $tmpfile | head -n 1 | sed 's|^.*/tree/v\([0-9\.]*\)" .*$|\1|')"

    _common_show_version
    rm -f $tmpfile
}

_nvidia-installer-db_hook() {
    # nvidia-site-check-and-update-db
    return

    # check if Nvidia has changed its driver archive (db) site
    local archive=https://www.nvidia.com/en-us/drivers/unix
    local store="$HOME"/.nvidia-installer/archive.html
    mkdir -p "$(dirname "$store")"
    local tmpfile="$(mktemp "$store".tmp.XXXXX)"

    _fetch_that_file "$tmpfile" $archive || {
        rm -f "$tmpfile"
        return 1
    }
    if (diff "$tmpfile" "$store" >& /dev/null) ; then
        rm -f "$store".tmp.*  # no diffs
    else
        mv "$store" "$store".tmp
        mv "$tmpfile" "$store"
        mv "$store".tmp "$tmpfile"
        printf "$archive changed! Run nvidia-installer-check to see if there's a problem. " >&2
    fi
}

_inxi_hook_check_latest() {
    # check if AUR PKGBUILD has the latest version of inxi from the developer
    local tool=inxi
    local url=https://github.com/smxi/$tool/releases
    local tmpdata
    local Pkgbuild="$PKGBUILD_ROOTDIR"/$tool/PKGBUILD
    local localversion=$(_Get_pkgver "$Pkgbuild")
    local dev_version
    local prefer_dev_version=yes

    tmpdata="$(_fetch_that_file - $url)"
    if [ $? -ne 0 ] ; then
        echo "cannot fetch info about $tool" >&2
        return 1
    fi
    # Inxi has a version number "conflicting" with Arch versioning. Have to change inxi's '-' to '.'.
    dev_version="$(echo "$tmpdata" | grep /smxi/inxi/releases/tag/ | head -n 1 | sed -e 's|^.*/tag/||' -e 's|".*$||' | tr '-' '.')"

    if [ "$prefer_dev_version" = "yes" ] ; then
        sed -i $Pkgbuild -e 's|^pkgver='"$localversion"'$|pkgver='"$dev_version"'|'
        # echo -n "#" >&2
        _Updpkgsums "$Pkgbuild"
        return 11  # pkgver was changed
    else
        _common_show_version
    fi
}

_downgrade_hook_check_latest() {
    # check if AUR PKGBUILD has the latest version of downgrade from the developer
    local tool=downgrade
    local url=https://github.com/pbrisbin/$tool/releases
    local tmpdata
    local Pkgbuild="$PKGBUILD_ROOTDIR"/$tool/PKGBUILD
    local localversion=$(_Get_pkgver "$Pkgbuild")
    local dev_version

    tmpdata="$(_fetch_that_file - $url)"
    if [ $? -ne 0 ] ; then
        echo "cannot fetch info about $tool" >&2
        return 1
    fi
    dev_version="$(echo "$tmpdata" | grep /pbrisbin/downgrade/releases/tag/v | head -n 1 | sed 's|^.*/tag/v\([0-9\.]*\).*$|\1|')"

    _common_show_version
}

_kalu_hook_fix_files() {
    # fix kalu.install
    sed -i "$PKGBUILD_ROOTDIR"/kalu/kalu.install \
        -e 's| usr/sbin/|/usr/sbin/|'

    # use names instead of numbers in "chown" command
    sed -i "$PKGBUILD_ROOTDIR"/kalu/PKGBUILD \
        -e 's|chown 0:102|chown root:polkitd|' \
        -e 's|^\(pkgrel=[0-9]*\)$|\1.1|'
}
_yad_hook_add_gspell() {
    # add gspell to 'depends', and modify 'pkgrel'
    sed -i "$PKGBUILD_ROOTDIR"/yad/PKGBUILD \
        -e 's|^depends=(\([^\)]*\))$|depends=(\1 gspell)|' \
        -e 's|^\(pkgrel=[0-9]*\)$|\1.1|'
}




# Common helper functions.

_helper_get_files_from_Arch() {
    local PKGNAME="$1"             # must include "repo/" prefix, e.g. "extra/yad"

    case "$PKGNAME" in
        */*) ;;
        *) return 1 ;;
    esac

    local tmpdir=$(mktemp -d)
    pushd $tmpdir >/dev/null
    yay -G $PKGNAME || return 1
    popd >/dev/null
    mv $tmpdir/$PKGNAME/trunk/* . || return 1
    rm -rf $tmpdir
}
_helper_compare_pkg_version_info() {
    # Compare pkgver and pkgrel of Arch and EOS PKGBUILDs.
    # If changed, manual intervention is needed: simply update PKGBUILD in EOS with new from Arch.

    local PKGNAME="$1"

    local -r ver1="$(grep "^pkgver=" PKGBUILD)"
    local -r rel1="$(grep "^pkgrel=" PKGBUILD        | sed 's|\.1$||')"
    local -r ver2="$(grep "^pkgver=" PKGBUILD.eos)"
    local -r rel2="$(grep "^pkgrel=" PKGBUILD.eos    | sed 's|\.1$||')"
    [ "$ver1" = "$ver2" ] || { echo "NOTE: $PKGNAME PKGBUILD (pkgver) has changed, manual intervention needed!" >&2; return 1; }
    [ "$rel1" = "$rel2" ] || { echo "NOTE: $PKGNAME PKGBUILD (pkgrel) has changed, manual intervention needed!" >&2; return 1; }
}
_helper_eos_branding_and_marking() {
    # - append ".eos" to 'pkgver' value to mark EOS changes
    # - add the EOS maintainer line
    # - update checksums because some files were changed here

    sed -i PKGBUILD -e "s|^\(pkgver=.*\)|\1.eos|"
    if [ -z "$(grep "Maintainer.*endeavouros" PKGBUILD)" ] ; then
        sed -i PKGBUILD -e "/^# Maintainer:/i \# Maintainer: EndeavourOS-Team <info@endeavouros.com>"
    fi
    updpkgsums PKGBUILD >& /dev/null
}


_yad_hook() {

    return    # 2023-Mar-08: currently not used!


    # patch the dialog height issue, see https://sourceforge.net/p/yad-dialog/tickets/322/#6f2d

    local workdir="$PKGBUILD_ROOTDIR"/yad
    local url=https://github.com/endeavouros-team/PKGBUILDS/raw/master/yad

    pushd "$workdir" >/dev/null

    cp PKGBUILD PKGBUILD.eos

    _helper_get_files_from_Arch extra/yad       || return 1
    _helper_compare_pkg_version_info extra/yad  || return 1

    sed -i PKGBUILD -E \
        -e '/autoreconf -ivf/i \  # patch for the dialog height issue\n  patch -u src/main.c -i ../../yad-github-issue-107.patch\n' \
        -e "s|^(sha256sums=.*)\)|\1 '9af007ad9472afc9fa24e753b30ce7b91cf2e73a37a0074a64ae01979010b30f'\)|" \
        -e "s|^(arch=.*)\)|\1 'aarch64' 'armv7'\)|" \
        -e "s|^(source=.*)\)$|\1 '$url/yad-github-issue-107.patch'\)|" \
        -e "s|^(pkgver=.*)|\1.eos|"

    sed -i PKGBUILD \
        -e 's|${pkgver}|${pkgver%.eos}|' \
        -e '/sha256sums=/a \conflicts=(yad yad-git)\nprovides=(yad)\nreplaces=(yad-eos)'

    _helper_eos_branding_and_marking

    popd >/dev/null
}

_diff_file_and_data() {
    local file="$1"
    local data="$2"
    local datafile="$3"
    local retval

    echo "$data" > $datafile
    #diff "$file" "$datafile"
    meld "$file" "$datafile"
}

_eos-bash-shared_hook_check_ksetwallpaper_py() {
    # Check if we have the latest version of file ksetwallpaper.py.
    # See https://github.com/pashazz/ksetwallpaper/raw/master/ksetwallpaper.py

    local file=ksetwallpaper.py
    local url="https://github.com/pashazz/ksetwallpaper/raw/master/$file"
    local current="$PKGBUILD_ROOTDIR"/eos-bash-shared/$file                     # old place
    local new
    local diffs answer

    current="$EOS_ROOT/eos-bash-shared/$file"                                  # new place

    new="$(_fetch_that_file - "$url")"
    if [ $? -ne 0 ] ; then
        echo "Warning: cannot fetch '$url'." >&2
        return 1
    fi
    if [ "$(cat "$current")" != "$new" ] ; then
        local newfile=$(mktemp)
        _diff_file_and_data "$current" "$new" "$newfile"
        # diffs="$(_diff_file_and_data "$current" "$new" "$newfile")"
        # echo "" >&2
        # echo "$diffs" >&2
        # echo "" >&2
        if false ; then
            read -p "eos-bash-shared: file '$file' differs from current, update (Y/n)? " answer >&2
            case "$answer" in
                "" | [yY]*)
                    rm -f $current
                    mv $newfile $current
                    _Updpkgsums "$current"
                    ;;
            esac
        fi
        rm -f "$newfile"
    fi
}

# Special hooks. Implemented via package hooks.

_assets_download_break() {
    return 0  # same contents under different asset tags, so always break after first download
}

declare -A ASSET_PACKAGE_HOOKS=(
    assets_mirrors         _assets_download_break    # special hook

    eos-bash-shared        _eos-bash-shared_hook_check_ksetwallpaper_py
    eos-lightdm-gtk-theme  _eos-lightdm-gtk-theme_hook
    paru                   _paru_hook
    dracut                 _dracut_hook

    # bashdb                 _bashdb_hook                                           # no more needed
    # budgie-control-center  _budgie-control-center_hook
    # ckbcomp                _ckbcomp_hook
    # ckbcomp                _ckbcomp_hook_change_version
    # downgrade              _downgrade_hook_check_latest
    # inxi                   _inxi_hook_check_latest
    # kalu                   _kalu_hook_fix_files
    # nvidia-installer-db    _nvidia-installer-db_hook
    # paper-icon-theme-git   _paper-icon-theme-git_hook
    # rate-mirrors           _rate-mirrors_hook
    # yad                    _yad_hook_add_gspell
    # yay                    _yay_hook_check_latest
)
