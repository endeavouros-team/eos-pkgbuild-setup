#!/bin/bash
#
# Check that a mirror repo has the same package and db files as the given local folder.
#

echo2()   { echo  "$@" >&2 ; }
echo2i()  { echoi "$@" >&2 ; }
echoi() {
    local level=""
    local xx
    local optcount=0
    for xx in "$@" ; do
        case "$xx" in
            -l=*) level=${xx:3} ; ((optcount++)) ;;
            -l*)  level=${xx:2} ; ((optcount++)) ;;
            -*) DIE "unsupported option $xx" ;;        # non-options cannot start with '-'
            *) break ;;                                # all options must be before other params
        esac
    done
    if [ -n "$level" ] ; then
        shift $optcount
    else
        level=1
    fi
    
    printf "%*s" $((level*4)) ""
    echo2 "$@"
}

DIE() {
    echo2 "Error: $1"
    Usage
    exit 1
}

NameCheck() {
    local xx yy
    for xx in "$@" ; do
        for yy in $remotefilelist ; do
            yy="${yy/\%2B/+}"                      # convert character code '%2B' to '+'
            test "$xx" = "$yy" && break
        done
        if [ "$xx" != "$yy" ] ; then
            echo2i "FAIL: $xx is missing from $reponame !"
            problemfiles+="$xx "
        else
            case "$mode" in
                fastall) ;;
                *) echo2 "    OK: $xx" ;;
            esac
        fi
    done
}

ContentsCheck() {
    local xx
    local url=""
    local repo_dir=""
    local orig_url="${mirror_url%/}"

    for xx in "$@" ; do
        case "$xx" in
            state)
                url="${orig_url}/../.."
                repo_dir="../../repo"
                ;;
            *)
                url="${orig_url}"
                repo_dir="."
                ;;
        esac

        if ! curl -Lfsm 10 -o "$tmpdir/$xx" "$url/$xx" ; then
            echo2i "FAIL: $xx fetching failed."
            problemfiles+="$xx "
            continue
        fi
        if ! cmp "$repo_dir/$xx" "$tmpdir/$xx" >/dev/null ; then
            echo2i "FAIL: $xx is different !"
            problemfiles+="$xx "
            continue
        fi
        rm -f "$tmpdir/$xx"
        echo2 "    OK: $xx"
    done
}

OneMirror() {
    local remotefilelist
    local packages repofiles
    local problemfiles=""
    local mirror_url
    local repo=endeavouros

    mirror_url="${MIRROR_URLS[$reponame]}"
    test -n "$mirror_url" || DIE "MIRROR_URLS[$reponame] is empty! Check file $conf."

    test -n "$folder" || folder=.
    test -d "$folder" || DIE "folder $folder does not exist!"
    test -r "$folder/endeavouros.db" || {
        echo2 "$(basename $0): nothing to see here."
        return
    }

    mirror_url="$(echo "$mirror_url" | sed "s|\$arch|$arch|")"
    mirror_url="$(echo "$mirror_url" | sed "s|\$repo|$repo|")"

    echo2 "$reponame:"
    remotefilelist="$(curl -s "$mirror_url" | grep -Pw 'tar|db|files' | sed 's|.*<a href="\([^"]*\)".*|\1|')"
    test -n "$remotefilelist" || DIE "cannot fetch package info from $mirror_url."

    pushd "$folder" >/dev/null

    packages="$(ls -1 *.pkg.tar.*)"
    repofiles="$(echo endeavouros.{db,files}{,.tar.xz})"

    # Check files. 'NameCheck' is very fast but unreliable. 'ContentsCheck' is quite slow but reliable.
    local tmpdir=$(mktemp -d)
    ContentsCheck $repofiles                 # This should make sure all is OK ! (?)
    ContentsCheck state
    if [ "$has_filelist" = "yes" ] ; then
        ContentsCheck repofiles.txt
    fi

    case "$mode" in
        fast | fastall)
            NameCheck $packages
            ;;
        slow)
            ContentsCheck $packages
            ;;
        optimized)
            for arg in $packages ; do
                case "$arg" in
                    # icon theme packages are very big
                    paper-icon-theme-*.pkg.tar.xz | paper-icon-theme-*.pkg.tar.zst | \
                    arc-x-icons-theme-*.pkg.tar.xz | arc-x-icons-theme-*.pkg.tar.zst)
                        NameCheck "$arg" ;;
                    *)
                        ContentsCheck "$arg" ;;
                esac
            done
            ;;
    esac
    rm -rf $tmpdir

    if [ -z "$problemfiles" ] ; then
        echo2i "==> No issues."
    else
        echo2i "==> Not yet ready."

        #echo2i "==> Problematic files: "
        #for arg in $problemfiles ; do
        #    echoi -l3 "$arg"
        #done
    fi
    popd >/dev/null
}

Usage() {
    local progname="$(basename $0)"
    cat <<EOF >&2

$progname: Check the validity of EndeavourOS packages in mirrors.

Usage: $progname [parameters]
parameters:
    --slow          Check contents of each file.
    --fast          Check just the name of all package files (default).
    --optimized     Check contents of some files, and names of other files.
    --reponame=X    Use given name as the mirror name (default: all known mirrors).
    --no-filelist   Don't generate list of latest files into the repo.
    --show-params   Show all available parameters as a list (for completion support).
    <folder-name>   Name of the local folder that contains package files.
                    If not given, current folder is used.

EOF
}

Main()
{
    # use assets.conf
    # local assets_conf=./assets.conf
    # test -r $assets_conf || DIE "cannot find local file $assets_conf."

    local has_filelist=no # "$(grep "^local USE_GENERATED_FILELIST=" $assets_conf | sed 's|^.*="\([yesno]*\)".*$|\1|')"
    local mode=fast   # show, optimized, fast
    local folder=""
    local reponame
    local arg
    local conf=/etc/eos-mirrorcheck.conf
    local arch=""
    local supported_params=(
        "<folder-name>"
        --slow
        --fast
        --optimized
        --reponame=
        --no-filelist
        --show-params
    )

    for arg in "$@" ; do
        case "$arg" in
            --reponame=*) reponame="${arg#*=}" ;;
            --slow) mode=slow ;;
            --fast) mode=fast ;;
            --optimized) mode=optimized ;;
            --no-filelist) has_filelist=no ;;   # no repofiles.txt
            --show-params) echo "${supported_params[*]}" ; return ;;
            -*) DIE "unsupported parameter '$arg'" ;;
            *) folder="$arg" ;;
        esac
    done

    [ -n "$folder" ] && cd "$folder"

    if [ -r assets.conf ] && [ -d PKG_ARCHIVE ] ; then
        arch=x86_64                # we are in the original build folder
    else
        arch=$(basename "$PWD")    # x86_64
        case "$arch" in
            x86_64 | aarch64 | armv7h) ;;
            *) DIE "must run this program at an architecture specific folder (e.g. repo/endeavouros/x86_64)." ;;
        esac
        case "$(grep "/endeavouros-team/" ../../.git/config)" in
            *https://github.com/endeavouros-team/repo | *https://github.com/endeavouros-team/repo.git) ;;
            *) DIE "this folder is not in endeavouros-team repo" ;;
        esac
    fi

    test -r $conf || DIE "configuration file $conf is required but not found."

    source $conf

    test -n "${MIRROR_NAMES[0]}" || DIE "MIRROR_NAMES[0] is empty! Check file $conf."

    case "$reponame" in
        "")
            reponame="${MIRROR_NAMES[0]}"       # default: Alpix
            OneMirror
            ;;
        all)
            #mode=fastall
            for reponame in "${MIRROR_NAMES[@]}" ; do
                OneMirror
            done
            ;;
        *)
            local list=/etc/pacman.d/endeavouros-mirrorlist
            if [ -n "$(grep "^Server = " $list | grep -iw "$reponame")" ] ; then
                OneMirror
            else
                cat <<EOF
Sorry, '$reponame' is unknown, or the URL is not active in file $list.
EOF
            fi
            ;;
    esac
}

Main "$@"
