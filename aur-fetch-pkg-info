#!/bin/bash

# Purposes:
# - Fetch the latest AUR info file from https://aur.archlinux.org/packages-meta-v1.json.gz
#   (if it has changed) to $AURSRCDIR/packages-meta-v1.json.
# - Show AUR package version.

echo2() { echo -e "$@" >&2 ; }
DIE() {
    local msg="$1"
    local code="$2"   # optional
    [ "$code" ] || code=1
    echo2 "==> $progname: error: $msg"
    exit $code
}
WARN() {
    local msg="$1"
    local code="$2"
    echo2 "==> $progname: warning: $msg"
    return $code
}

Error_curl() {
    local -r exitcode="$1"
    local -r timeout="$2"    # optional
    case "$exitcode" in
        7)  DIE "FAIL (curl: connection failed)"           $exitcode ;;
        28) DIE "FAIL (curl: timeout in $timeout seconds)" $exitcode ;;
        35) DIE "FAIL (curl: SSL connect error)"           $exitcode ;;
        *)  DIE "FAIL (curl: exit code $exitcode)"         $exitcode ;;
    esac
}
Error_gunzip() {
    local -r exitcode="$1"
    local -r msg="$2"
    case "$exitcode" in
        1) DIE "FAIL (gunzip: $msg)" $exitcode ;;
        2) WARN "WARNING (gunzip: $msg)" $exitcode ;;
    esac
}

Fetch() {
    echo2 -n "FETCHING: "
    local cmd=( /bin/curl --fail-early --verbose -o "$target.gz" --remote-time -Lsm $fetch_timeout "$url" )
    [ -e "$target" ] && cmd+=(--time-cond "$target")

    "${cmd[@]}" || Error_curl $? $fetch_timeout

    if [ -e "$target.gz" ] ; then
        rm -f "${target}"
        gunzip "$target.gz" >/dev/null || Error_gunzip $? "problem with 'gunzip $target.gz'"
    fi
    echo2 "OK"
}

GetPkgVersion() {
    local -r pkgname="$1"
    if [ -r "$target" ] ; then
        jq < "$target" | grep -A1 "\"PackageBase\": \"$pkgname\"" | grep '"Version"' | awk '{print $NF}' | tr -d '",'
    else
        DIE "$FUNCNAME: $target missing"
    fi
}

Help() {
    local out="$1"
    [ "$out" ] || out=/dev/stderr
    cat <<EOF >$out
Purpose: Fetch the latest AUR package info file.
Usage:   $progname {options}
Options: -f,   --fetch               Fetch the latest AUR info file if needed.
         -f=*, --fetch=*             Fetch the latest AUR info file if needed, with set timeout (seconds).
         -r,   --remove              Remove the local AUR info file.
         -i,   --show-target-info    Show details about the info file (to stderr).
         -p,   --show-target-path    Show the path of the info file (to stdout).
         -v=*, --pkg-version=*       Show the version if the given AUR package (to stdout).
         -h,   --help                This help.
EOF
}

Main() {
    local -r progname=${0##*/}
    [ "$AURSRCDIR" ] || DIE "AURSRCDIR is empty"
    local -r url="https://aur.archlinux.org/packages-meta-v1.json.gz"
    local -r file="${url##*/}"
    local -r target="$AURSRCDIR/${file%.gz}"
    local show_target_path=no
    local show_target_info=no
    local fetch=no
    local fetch_timeout=30

    [ "$1" ] || DIE "required parameter missing\n\n$(Help /dev/stdout)"

    while true ; do
        case "$1" in
            "") break ;;
            -f | --fetch)            fetch=yes ;;
            -f=* | --fetch=*)        fetch=yes; fetch_timeout=${1#*=} ;;
            -i | --show-target-info) show_target_info=yes ;;
            -p | --show-target-path) show_target_path=yes ;;
            -v=* | --pkg-version=*)  GetPkgVersion "${1#*=}"; exit ;;
            -r | --remove)           rm -f "$target"; exit 0 ;;
            -h | --help)             Help; exit 0 ;;
        esac
        shift
    done
    [ "$fetch" = yes ] && Fetch

    [ $show_target_path = yes ] && echo "${target}"
    [ $show_target_info = yes ] && ls -l "${target}" >&2
}

Main "$@"
